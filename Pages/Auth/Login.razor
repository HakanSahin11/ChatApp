@page "/"
@using static Models.Login
@using Chat_Application.Help_Classes
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject UserService userService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager
@inject ProtectedLocalStorage protectedStorage


@layout EmptyLayout

<div class="col-md-4 offset-md-4 mt-5 card">
    <h4 class="card-header">Login</h4>
    <div class="card-body">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label>Username or Email</label>
                <InputText @bind-Value="model.Username" class="form-control" />
                <ValidationMessage For="@(() => model.Username)" />
            </div>
            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="model.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => model.Password)" />
            </div>
            <div class="form-control-plaintext">
                <button disabled="@loading" class="btn btn-primary">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Login
                </button>
                <NavLink href="register" class="btn btn-link">Register</NavLink>
            </div>

        </EditForm>
    </div>
</div>

@code {

    private bool loading;
    private Models.Login model = new Models.Login();

    private async Task OnValidSubmit()
    {
        loading = true;
        try
        {
            var result = await userService.LoginAsync(model);
            if (result == true)
            {
                await JsRuntime.InvokeVoidAsync("alert", "True");

                var user = model.Username;
                if (user.Contains("@"))
                {
                    user = await userService.GetUsername(user);
                }
                await protectedStorage.SetAsync("user", user);

                NavManager.NavigateTo("/index", false ,false);
            }
            else
                await JsRuntime.InvokeVoidAsync("alert", "False");
                loading = false;
        }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
    }


}
