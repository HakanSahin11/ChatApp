@page "/register"
@using Chat_Application.Help_Classes 
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using static Models.RegisterModel
@inject UserService userService
@inject IJSRuntime JsRuntime
@layout EmptyLayout
@inject NavigationManager NavManager
@inject ProtectedLocalStorage protectedStorage

<div class="col-md-4 offset-md-4 mt-2 card">
        <h4 class="card-header">Register</h4>
        <div class="card-body">
            <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
                  <DataAnnotationsValidator />

                <div class="form-group">
                    <label class="col-form-label-sm">Username</label>
                    <InputText @bind-Value="model.Username" class="form-control" />
                    <ValidationMessage For="@(() => model.Username)" />
                </div>
                <div class="form-group">
                    <label class="col-form-label-sm">Email</label>
                    <InputText @bind-Value="model.Email" class="form-control" />
                    <ValidationMessage For="@(() => model.Email)" />
                </div>
                <div class="form-group">
                    <label class="col-form-label-sm">Password</label>
                    <InputText @bind-Value="model.Password" class="form-control" type="Password"/>
                    <ValidationMessage For="@(() => model.Password)" />
                </div>
                <div class="form-group">
                    <label class="col-form-label-sm">Confirm Password</label>
                    <InputText @bind-Value="model.ConfirmPassword" class="form-control" type="Password"/>
                    <ValidationMessage For="@(() => model.ConfirmPassword)" /> 
                </div>
                <div class="form-group">
                    <label class="col-form-label-sm">First Name</label>
                    <InputText @bind-Value="model.FirstName" class="form-control" />
                    <ValidationMessage For="@(() => model.FirstName)" />
                </div>
                <div class="form-group">
                    <label class="col-form-label-sm">Last Name</label>
                    <InputText @bind-Value="model.LastName" class="form-control" />
                    <ValidationMessage For="@(() => model.LastName)" />
                </div>
                <div class=" form-control-plaintext">
                     <label class="col-form-label-sm">Date of Birth</label>
                        <div col-md-10>
                        <InputDate @bind-Value="model.Birthday"  />
                            <select class="selectpicker" @bind="model.Gender">
                               <option value="0">--Select Gender--</option>
                               <option value="Male">Male</option>
                               <option value="Female">Female</option>
                               <option value="Other">Other</option>
                           </select>
                       </div>
                </div>


                <div col-md-10 class="" >
                    <button disabled="@loading" class="btn btn-primary">
                        @if (loading) 
                        {
                            <span class="spinner-border spinner-border-sm mr-1"></span>
                        }
                        Register
                    </button>
                    <NavLink href="/" class="btn btn-link">Login</NavLink>
                </div>
            </EditForm>
      </div>
</div>

@code {
    private Models.RegisterModel model = new Models.RegisterModel();
    private bool loading;


    private async void OnValidSubmit()
    {

        loading = true;
        try
        {
            if (model.Password != model.ConfirmPassword)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error, Passwords do not match");
                return;
            }
            if(model.Gender == null)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error, Please Select gender");
                return;
            }

            if(userService.CheckIfUserExist(model.Username, model.Email).Result == true)
                await JsRuntime.InvokeVoidAsync("alert", "Username or email taken!");


            var task = Task.Run(() => userService.InsertuserAsync(
                new Models.UserModel(null, model.Email, model.Username, model.Password, model.FirstName, model.LastName, model.Gender, model.Birthday, null)));
           
                if (task.Result == true)
            {
            await JsRuntime.InvokeVoidAsync("alert", "User Created!");

            var user = model.Username;
                if (user.Contains("@"))
                {
                    user = await userService.GetUsername(user);
                }
                await protectedStorage.SetAsync("user", user);
            NavManager.NavigateTo("/index");

            }

            else 
                await JsRuntime.InvokeVoidAsync("alert", "Error! User couldn't be created");
            }
        catch (Exception e)
        {
            await JsRuntime.InvokeVoidAsync("alert", e.Message);
        }
        finally
        {
            loading = false;
            StateHasChanged();
        } 
    }
}
