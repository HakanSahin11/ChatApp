@page "/index"
@using Chat_Application.Help_Classes
@using Chat_Application.Hubs
@using Chat_Application.Utilities
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject NavigationManager NavManager
@inject UserService userService
@inject ProtectedLocalStorage protectedStorage

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        var user = await protectedStorage.GetAsync<string>("user");

        if ( user.Value == null)
        {
            NavManager.NavigateTo("/", false ,false);
            return;
        }
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (time, user, message) =>
        {
            var encodedMsg = $"{time} {user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();        

        ConnectionUtility.AllConnections.Add(hubConnection.ConnectionId, user.Value);
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            var user = await protectedStorage.GetAsync<string>("user");
            var msgTo = userInput;


          //  await hubConnection.SendAsync("SendMessage", userInput, messageInput);
            await hubConnection.SendAsync("SendPrivateMessage", user.Value, msgTo, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}